/**
 * MCC Level Weekly Comparison Google Ads Script
 * 
 * This script generates a report comparing the performance of campaigns
 * across all accessible accounts in the MCC for last week (Monday to Sunday)
 * versus the week before that. It excludes specific campaigns and highlights
 * top performers based on conversions.
 * 
 * Version: 6.0
 * Created: 2024-08-21
 * Updated: 2024-08-21
 */

var CONFIG = {
  EMAIL_RECIPIENT: "robert.creutzburg@skydreams.nl",
  MAX_RETRIES: 3,
  RETRY_INTERVAL: 30000, // 30 seconds
  CURRENCY_SYMBOL: "‚Ç¨",
  PERFORMANCE_EMOJIS: ['üî•', 'üëç', 'üòê', 'üëé', 'üÜò'],
  COLOR_PALETTE: ['#FF6B6B', '#4ECDC4', '#45B7D1', '#FED766', '#2AB7CA'],
  EXCLUDED_CAMPAIGN_KEYWORDS: ['moving', 'demena', 'umzug', 'trasloch', 'getamove', 'flytt', 'mudanza', 'verhuis', 'flyt']
};

function main() {
  Logger.log("Script started");
  var accountIterator = AdsManagerApp.accounts().get();
  var processedAccounts = 0;
  var failedAccounts = 0;
  var errorLog = [];

  while (accountIterator.hasNext()) {
    var account = accountIterator.next();
    var accountId = account.getCustomerId();
    Logger.log("Attempting to process account: " + accountId);

    try {
      var result = processAccountSafely(account);
      if (result.success) {
        processedAccounts++;
        Logger.log("Successfully processed account: " + accountId);
      } else {
        failedAccounts++;
        errorLog.push("Failed to process account " + accountId + ": " + result.error);
        Logger.log("Failed to process account " + accountId + ": " + result.error);
      }
    } catch (e) {
      failedAccounts++;
      errorLog.push("Unexpected error processing account " + accountId + ": " + e.message);
      Logger.log("Unexpected error processing account " + accountId + ": " + e.message);
    }
  }

  sendSummaryEmail(processedAccounts, failedAccounts, errorLog);
  Logger.log("Script completed");
}

function processAccountSafely(account) {
  for (var attempt = 0; attempt < CONFIG.MAX_RETRIES; attempt++) {
    try {
      AdsManagerApp.select(account);
      
      var accountName = account.getName();
      var customerId = account.getCustomerId();
      Logger.log("Processing account: " + customerId);

      var reportData = getReportData();
      
      if (reportData.thisWeek.length > 0 || reportData.lastWeek.length > 0) {
        var emailBody = createEmailBody(reportData, accountName, customerId);
        sendEmail(emailBody, customerId);
        return { success: true };
      } else {
        Logger.log("No data found for account: " + customerId);
        return { success: true };
      }
    } catch (e) {
      Logger.log("Attempt " + (attempt + 1) + " failed for account " + account.getCustomerId() + ": " + e.message);
      if (attempt < CONFIG.MAX_RETRIES - 1) {
        Utilities.sleep(CONFIG.RETRY_INTERVAL);
      } else {
        return { success: false, error: e.message };
      }
    }
  }
}

function getReportData() {
  var dates = getLastTwoWeekDates();
  var thisWeekQuery = buildGAQLQuery(dates.thisWeekStart, dates.thisWeekEnd);
  var lastWeekQuery = buildGAQLQuery(dates.lastWeekStart, dates.lastWeekEnd);

  var thisWeekData = runGAQLQuery(thisWeekQuery);
  var lastWeekData = runGAQLQuery(lastWeekQuery);

  return {
    thisWeek: thisWeekData,
    lastWeek: lastWeekData
  };
}

function getLastTwoWeekDates() {
  var today = new Date();
  var currentDay = today.getDay();
  var daysToLastSunday = currentDay === 0 ? 7 : currentDay;

  var lastSunday = new Date(today);
  lastSunday.setDate(today.getDate() - daysToLastSunday);

  var thisWeekStart = new Date(lastSunday);
  thisWeekStart.setDate(lastSunday.getDate() - 6);

  var lastWeekEnd = new Date(thisWeekStart);
  lastWeekEnd.setDate(thisWeekStart.getDate() - 1);

  var lastWeekStart = new Date(lastWeekEnd);
  lastWeekStart.setDate(lastWeekEnd.getDate() - 6);

  return {
    thisWeekStart: formatDate(thisWeekStart),
    thisWeekEnd: formatDate(lastSunday),
    lastWeekStart: formatDate(lastWeekStart),
    lastWeekEnd: formatDate(lastWeekEnd)
  };
}

function formatDate(date) {
  return Utilities.formatDate(date, AdsApp.currentAccount().getTimeZone(), 'yyyy-MM-dd');
}

function buildGAQLQuery(startDate, endDate) {
  return `
    SELECT 
      campaign.name, 
      metrics.impressions, 
      metrics.clicks, 
      metrics.cost_micros, 
      metrics.conversions, 
      metrics.conversions_value 
    FROM campaign 
    WHERE 
      campaign.status = 'ENABLED' AND 
      segments.date BETWEEN '${startDate}' AND '${endDate}'
  `;
}

function runGAQLQuery(query) {
  Logger.log("Executing GAQL query: " + query);
  var report = AdsApp.search(query);
  var results = [];

  while (report.hasNext()) {
    var row = report.next();
    if (!isExcludedCampaign(row.campaign.name)) {
      results.push({
        name: row.campaign.name,
        impressions: row.metrics.impressions,
        clicks: row.metrics.clicks,
        cost: row.metrics.costMicros / 1000000,
        conversions: row.metrics.conversions,
        conversionValue: row.metrics.conversionsValue
      });
    }
  }

  Logger.log("Query returned " + results.length + " results");
  return results;
}

function isExcludedCampaign(campaignName) {
  return CONFIG.EXCLUDED_CAMPAIGN_KEYWORDS.some(keyword => 
    campaignName.toLowerCase().includes(keyword.toLowerCase())
  );
}

function createEmailBody(reportData, accountName, customerId) {
  var html = '<h1 style="color: #4A4A4A; text-align: center;">üéâ Weekly Campaign Comparison Report üéâ</h1>';
  html += `<h2 style="color: #6D6D6D; text-align: center;">Account: ${accountName} (${customerId})</h2>`;
  html += `<h3 style="color: #6D6D6D; text-align: center;">Last Week vs Previous Week</h3>`;

  // Add top campaigns section
  html += createTopCampaignsSection(reportData.thisWeek);

  html += '<table border="1" cellpadding="10" style="border-collapse: collapse; margin: auto;">';
  html += '<tr style="background-color: #f2f2f2; font-weight: bold;">' +
    '<th>Campaign</th>' +
    '<th>Impressions</th>' +
    '<th>Clicks</th>' +
    '<th>Cost</th>' +
    '<th>Conversions</th>' +
    '<th>Conv. Value</th>' +
    '<th>Performance</th>' +
    '</tr>';

  reportData.thisWeek.forEach(function(thisWeekCampaign, index) {
    var lastWeekCampaign = reportData.lastWeek.find(c => c.name === thisWeekCampaign.name) || 
      {impressions: 0, clicks: 0, cost: 0, conversions: 0, conversionValue: 0};
    
    var rowColor = CONFIG.COLOR_PALETTE[index % CONFIG.COLOR_PALETTE.length];
    var performanceEmoji = getPerformanceEmoji(thisWeekCampaign, lastWeekCampaign);
    
    html += '<tr style="background-color: ' + rowColor + '20;">'; // 20 is for 20% opacity
    html += '<td>' + thisWeekCampaign.name + '</td>' +
      '<td style="text-align: right;">' + formatComparison(thisWeekCampaign.impressions, lastWeekCampaign.impressions) + '</td>' +
      '<td style="text-align: right;">' + formatComparison(thisWeekCampaign.clicks, lastWeekCampaign.clicks) + '</td>' +
      '<td style="text-align: right;">' + formatComparison(thisWeekCampaign.cost, lastWeekCampaign.cost, true) + '</td>' +
      '<td style="text-align: right;">' + formatComparison(thisWeekCampaign.conversions, lastWeekCampaign.conversions) + '</td>' +
      '<td style="text-align: right;">' + formatComparison(thisWeekCampaign.conversionValue, lastWeekCampaign.conversionValue, true) + '</td>' +
      '<td style="text-align: center; font-size: 24px;">' + performanceEmoji + '</td>' +
      '</tr>';
  });

  html += '</table>';

  html += createEmojiLegend();

  return html;
}

function createTopCampaignsSection(campaigns) {
  var sortedCampaigns = campaigns.sort((a, b) => b.conversions - a.conversions);
  var topCampaigns = sortedCampaigns.slice(0, 5);

  var html = '<h3 style="color: #4A4A4A; text-align: center;">Top 5 Campaigns by Conversions</h3>';
  html += '<table border="1" cellpadding="10" style="border-collapse: collapse; margin: auto; margin-bottom: 20px;">';
  html += '<tr style="background-color: #f2f2f2; font-weight: bold;">' +
    '<th>Campaign</th>' +
    '<th>Conversions</th>' +
    '</tr>';

  topCampaigns.forEach(function(campaign, index) {
    var rowColor = CONFIG.COLOR_PALETTE[index % CONFIG.COLOR_PALETTE.length];
    html += '<tr style="background-color: ' + rowColor + '20;">';
    html += '<td>' + campaign.name + '</td>' +
      '<td style="text-align: right;">' + campaign.conversions.toFixed(2) + '</td>' +
      '</tr>';
  });

  html += '</table>';
  return html;
}

function formatComparison(current, previous, isCurrency) {
  var diff = current - previous;
  var percentChange = previous !== 0 ? (diff / previous) * 100 : 100;
  var formattedCurrent = isCurrency ? CONFIG.CURRENCY_SYMBOL + current.toFixed(2) : current.toLocaleString();
  var formattedDiff = isCurrency ? CONFIG.CURRENCY_SYMBOL + Math.abs(diff).toFixed(2) : Math.abs(diff).toLocaleString();
  var arrow = diff >= 0 ? '‚ñ≤' : '‚ñº';
  var color = diff >= 0 ? 'green' : 'red';

  return formattedCurrent + ' <span style="color:' + color + ';">(' + arrow + formattedDiff + ', ' + percentChange.toFixed(2) + '%)</span>';
}

function getPerformanceEmoji(current, previous) {
  var metrics = ['impressions', 'clicks', 'conversions', 'conversionValue'];
  var improvements = metrics.filter(metric => current[metric] > previous[metric]).length;
  return CONFIG.PERFORMANCE_EMOJIS[Math.floor((improvements / metrics.length) * (CONFIG.PERFORMANCE_EMOJIS.length - 1))];
}

function createEmojiLegend() {
  var html = '<div style="margin-top: 20px; border-top: 1px solid #ccc; padding-top: 10px;">';
  html += '<h4 style="color: #4A4A4A; text-align: center;">Emoji Legend</h4>';
  html += '<table style="margin: auto; border-collapse: collapse;">';
  html += '<tr><th style="text-align: left; padding: 5px;">Emoji</th><th style="text-align: left; padding: 5px;">Meaning</th></tr>';
  html += '<tr><td style="padding: 5px;">' + CONFIG.PERFORMANCE_EMOJIS[4] + '</td><td>Excellent (All metrics improved)</td></tr>';
  html += '<tr><td style="padding: 5px;">' + CONFIG.PERFORMANCE_EMOJIS[3] + '</td><td>Good (Most metrics improved)</td></tr>';
  html += '<tr><td style="padding: 5px;">' + CONFIG.PERFORMANCE_EMOJIS[2] + '</td><td>Average (Some metrics improved)</td></tr>';
  html += '<tr><td style="padding: 5px;">' + CONFIG.PERFORMANCE_EMOJIS[1] + '</td><td>Below Average (Few metrics improved)</td></tr>';
  html += '<tr><td style="padding: 5px;">' + CONFIG.PERFORMANCE_EMOJIS[0] + '</td><td>Poor (No metrics improved)</td></tr>';
  html += '</table>';
  html += '</div>';
  return html;
}

function sendEmail(emailBody, accountId) {
  var subject = `üè† Weekly Campaign Comparison Report - Account ${accountId}`;
  
  MailApp.sendEmail({
    to: CONFIG.EMAIL_RECIPIENT,
    subject: subject,
    htmlBody: emailBody
  });
  Logger.log("Email sent for account: " + accountId);
}

function sendSummaryEmail(processedAccounts, failedAccounts, errorLog) {
  var subject = "MCC Weekly Report Summary";
  var body = `Processed accounts: ${processedAccounts}\n` +
             `Failed accounts: ${failedAccounts}\n\n` +
             `Error Log:\n${errorLog.join('\n')}`;
  
  MailApp.sendEmail(CONFIG.EMAIL_RECIPIENT, subject, body);
  Logger.log("Summary email sent");
}
