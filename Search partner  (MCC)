var SPREADSHEET_URL = 'https://docs.google.com/spreadsheets/d/1_G8qinEPKf0rvb8gJzPHIShVtwpqnAWvyWJsU50Qc9o/edit?gid=0#gid=0';
var DEFAULT_EMAIL_ADDRESS = 'robert.creutzburg@skydreams.nl';
var SEND_EMAIL = true;
var EMAIL_SUBJECT = "Search Partners Performance Alert";
var EMAIL_BODY_TEMPLATE = "..."; // Uw bestaande e-mail sjabloon

// Functie om CostMicros om te zetten naar standaard valuta
function convertMoney(micros) {
  return micros / 1000000;
}

// Functie om datum naar 'YYYYMMDD' formaat om te zetten
function formatDateForQuery(dateString) {
  var date = new Date(dateString);
  var year = date.getFullYear();
  var month = ('0' + (date.getMonth() + 1)).slice(-2);
  var day = ('0' + date.getDate()).slice(-2);
  return year + month + day;
}

function main() {
  Logger.log("Script gestart");
  var ss = SpreadsheetApp.openByUrl(SPREADSHEET_URL);
  var sheet = ss.getSheetByName('searchpartners'); // Je master sheet
  var data = sheet.getDataRange().getValues();

  var accountFlags = {};
  for (var i = 1; i < data.length; i++) {
    var accountId = data[i][0]; // ACCOUNT ID kolom
    if (accountId) {
      accountFlags[accountId] = {
        campaignLabel: data[i][1] || '', // CAMPAIGN LABEL kolom
        reportUrl: data[i][2], // REPORT URL kolom
        clickThreshold: data[i][3] || 0, // CLICK THRESHOLD kolom
        cpaDiffThreshold: data[i][4] || 0, // CPA DIFF THRESHOLD kolom
        period: formatDateForQuery(data[i][5].split(" - ")[0]) + "," + formatDateForQuery(data[i][5].split(" - ")[1]), // Datumformaat omzetten naar YYYYMMDD
        emailAddresses: data[i][6] || DEFAULT_EMAIL_ADDRESS, // EMAIL ADDRESSES kolom
        rowIndex: i + 1 // Bewaar de rij-index voor later gebruik
      };
    }
  }

  Logger.log("Aantal accounts geladen: " + Object.keys(accountFlags).length);

  var startTime = new Date();
  var accountSelector = AdsManagerApp.accounts().withIds(Object.keys(accountFlags));
  var inputData = JSON.stringify({accountFlags: accountFlags, startTime: startTime.toISOString()});
  Logger.log("Input data voor executeInParallel: " + inputData);
  
  // Sla de inputData op in een script-eigenschap
  PropertiesService.getScriptProperties().setProperty('inputData', inputData);
  
  accountSelector.executeInParallel("processClientAccount", "afterProcessAllClientAccounts");
}

function processClientAccount() {
  var scriptProperties = PropertiesService.getScriptProperties();
  var inputString = scriptProperties.getProperty('inputData');
  
  Logger.log("processClientAccount gestart met input: " + inputString);
  var input = JSON.parse(inputString);
  var accountFlags = input.accountFlags;
  var accountId = AdsApp.currentAccount().getCustomerId();
  var flags = accountFlags[accountId];

  if (!flags) {
    Logger.log("Geen configuratie gevonden voor account " + accountId);
    return JSON.stringify({accountId: accountId, issues: [], error: "Geen configuratie gevonden"});
  }

  var accountName = AdsApp.currentAccount().getName();
  Logger.log("Verwerking van account: " + accountName + " (ID: " + accountId + ")");
  var accountIssues = [];

  try {
    var accountSheet = SpreadsheetApp.openByUrl(flags.reportUrl).getActiveSheet(); // Open de report URL sheet
    accountSheet.clear(); // Maak de sheet schoon voordat nieuwe data wordt ingevuld
    var header = ["Account Name", "Campaign Name", "Clicks GoogleNetwork", "Clicks SearchPartners", "Diff", 
                  "Avg CPC GoogleNetwork", "Avg CPC SearchPartners", "Diff", "Cost GoogleNetwork", 
                  "Cost SearchPartners", "Diff", "Conversions GoogleNetwork", "Conversions SearchPartners", 
                  "Diff", "Cost/Conv GoogleNetwork", "Cost/Conv SearchPartners", "Diff"];
    accountSheet.appendRow(header); // Voeg de headers toe aan de sheet

    var campaignIds = getCampaignIdsWithLabel(flags.campaignLabel); // Haal campagnes op met het label
    Logger.log("Aantal campagnes gevonden met label '" + flags.campaignLabel + "': " + campaignIds.length);
    if (campaignIds.length === 0) {
      Logger.log("Geen campagnes gevonden met label: " + flags.campaignLabel);
      return JSON.stringify({accountId: accountId, issues: [], error: "Geen campagnes gevonden met label: " + flags.campaignLabel});
    }

    var report = AdsApp.report(
      'SELECT CampaignName, CampaignId, Clicks, CostMicros, AverageCpc, Conversions ' +
      'FROM CAMPAIGN_PERFORMANCE_REPORT ' +
      'WHERE CampaignStatus = "ENABLED" ' +
      'AND AdNetworkType2 = "SEARCH_PARTNERS" ' +
      'AND Clicks > ' + flags.clickThreshold +
      ' AND CampaignId IN [' + campaignIds.join(",") + ']' +
      ' DURING ' + flags.period
    );

    var campaignSearchPartnerStatsObjArray = [];
    var rows = report.rows();
    while (rows.hasNext()) {
      var row = rows.next();
      var conversions = parseFloat(row['Conversions']);
      var cost = convertMoney(parseFloat(row['CostMicros'])); // Kosten omzetten van micros naar valuta
      var costPerConversion = conversions > 0 ? cost / conversions : 0;

      var campaignSearchPartnerStatsObj = {
        campaignName: row['CampaignName'],
        campaignId: row['CampaignId'],
        clicks: parseInt(row['Clicks']),
        cost: cost,
        avgcpc: parseFloat(row['AverageCpc']),
        conversions: conversions,
        costPerConversion: costPerConversion
      };

      campaignSearchPartnerStatsObjArray.push(campaignSearchPartnerStatsObj);
    }

    Logger.log("Aantal campagnes met zoekpartners data: " + campaignSearchPartnerStatsObjArray.length);

    if (campaignSearchPartnerStatsObjArray.length > 0) {
      var campaignGoogleNetworkStatsObjArray = getCampaignGoogleNetworkStats(campaignIds, flags.period);

      for (var j = 0; j < campaignIds.length; j++) {
        var campaignId = campaignIds[j];
        var campaignGoogleNetworkStatsObj = getObject(campaignGoogleNetworkStatsObjArray, campaignId);
        var campaignSearchPartnerStatsObj = getObject(campaignSearchPartnerStatsObjArray, campaignId);

        if (campaignGoogleNetworkStatsObj && campaignSearchPartnerStatsObj) {
          var absCpaDiff = Math.abs((campaignSearchPartnerStatsObj.costPerConversion - campaignGoogleNetworkStatsObj.costPerConversion) / campaignGoogleNetworkStatsObj.costPerConversion);
          if (absCpaDiff > flags.cpaDiffThreshold) {
            var issue = [
              accountName,
              campaignGoogleNetworkStatsObj.campaignName,
              campaignGoogleNetworkStatsObj.clicks,
              campaignSearchPartnerStatsObj.clicks,
              ((campaignSearchPartnerStatsObj.clicks - campaignGoogleNetworkStatsObj.clicks) / campaignGoogleNetworkStatsObj.clicks).toFixed(2),
              campaignGoogleNetworkStatsObj.avgcpc.toFixed(2),
              campaignSearchPartnerStatsObj.avgcpc.toFixed(2),
              ((campaignSearchPartnerStatsObj.avgcpc - campaignGoogleNetworkStatsObj.avgcpc) / campaignGoogleNetworkStatsObj.avgcpc).toFixed(2),
              campaignGoogleNetworkStatsObj.cost.toFixed(2),
              campaignSearchPartnerStatsObj.cost.toFixed(2),
              ((campaignSearchPartnerStatsObj.cost - campaignGoogleNetworkStatsObj.cost) / campaignGoogleNetworkStatsObj.cost).toFixed(2),
              campaignGoogleNetworkStatsObj.conversions.toFixed(2),
              campaignSearchPartnerStatsObj.conversions.toFixed(2),
              ((campaignSearchPartnerStatsObj.conversions - campaignGoogleNetworkStatsObj.conversions) / campaignGoogleNetworkStatsObj.conversions).toFixed(2),
              campaignGoogleNetworkStatsObj.costPerConversion.toFixed(2),
              campaignSearchPartnerStatsObj.costPerConversion.toFixed(2),
              ((campaignSearchPartnerStatsObj.costPerConversion - campaignGoogleNetworkStatsObj.costPerConversion) / campaignGoogleNetworkStatsObj.costPerConversion).toFixed(2)
            ];
            accountSheet.appendRow(issue); // Vul de gegevens in de REPORT sheet in
          }
        }
      }
    }
    
    var returnValue = JSON.stringify({
      accountName: accountName,
      accountId: accountId,
      issues: [],
      error: null
    });
    Logger.log("Returning from processClientAccount: " + returnValue);
    return returnValue;
  } catch (e) {
    Logger.log("Fout bij verwerken van account " + accountId + ": " + e.message);
    return JSON.stringify({
      accountName: accountName,
      accountId: accountId,
      issues: [],
      error: e.message
    });
  }
}

// Functie om resultaten te verwerken nadat alle client-accounts zijn verwerkt
function afterProcessAllClientAccounts(results) {
  Logger.log("afterProcessAllClientAccounts gestart");

  var scriptProperties = PropertiesService.getScriptProperties();
  var inputString = scriptProperties.getProperty('inputData');

  if (!inputString) {
    Logger.log("Geen input gevonden, het script stopt hier.");
    return;
  }

  var input = JSON.parse(inputString);
  var accountFlags = input.accountFlags;

  Logger.log("Aantal resultaten ontvangen: " + results.length);
  
  var masterSheet = SpreadsheetApp.openByUrl(SPREADSHEET_URL).getSheetByName('searchpartners');

  results.forEach(function(result, index) {
    var resultData = JSON.parse(result.getReturnValue());
    Logger.log("Resultaat voor account: " + resultData.accountName);

    if (resultData.error) {
      Logger.log("Fout bij verwerken van account: " + resultData.accountName + " - Fout: " + resultData.error);
    }

    // Update de laatste uitvoertijd in de master sheet
    var flags = accountFlags[resultData.accountId];
    if (flags) {
      var rowIndex = flags.rowIndex;
      masterSheet.getRange(rowIndex, 8).setValue(new Date().toLocaleString()); // LastRun in MCCTIME
      masterSheet.getRange(rowIndex, 9).setValue(resultData.error || 'Processed'); // Error message of status
    }
  });
  
  Logger.log("Verwerking van alle client-accounts voltooid.");
}

function getCampaignIdsWithLabel(label) {
  Logger.log("getCampaignIdsWithLabel aangeroepen met label: " + label);
  var campaignIds = [];
  if (label) {
    var labelIterator = AdsApp.labels()
      .withCondition("Name = '" + label + "'")
      .get();

    if (labelIterator.hasNext()) {
      var labelObj = labelIterator.next();
      var campaignIterator = labelObj.campaigns().get();
      while (campaignIterator.hasNext()) {
        campaignIds.push(campaignIterator.next().getId());
      }
    }
  }
  Logger.log("Aantal campagne IDs gevonden: " + campaignIds.length);
  return campaignIds;
}

function getObject(array, campaignId) {
  return array.find(function(obj) {
    return obj.campaignId === campaignId;
  });
}
